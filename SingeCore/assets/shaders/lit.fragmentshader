//vec3 fragmentPosition;
//vec2 texcoords;
//vec3 cameraPosition;
//vec3 normal;
//vec4 lightFragmentPositions[10];
//mat4 view;
//
//uniform struct _material	{ 
//	vec4 ambient;
//	vec4 color;
//	vec4 diffuse;
//	vec4 specular;
//	float shininess;
//	float reflectivity;
//	bool useDiffuseMap;
//	sampler2D diffuseMap;
//	bool useSpecularMap;
//	sampler2D specularMap;
//	bool useReflectionMap;
//	sampler2D reflectionMap;
//	samplerCube areaMap;
//} material;

struct _light{
	bool enabled;
	int lightType;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float range;
	float radius;
	float edgeSoftness;
	vec3 position;
	vec3 direction;
	float intensity;
};

#define MaxLights 10

uniform _light [MaxLights] Lights;
uniform int LightCount;
uniform sampler2D LightShadowMaps[MaxLights];
uniform samplerCube LightShadowCubeMaps[MaxLights];

float CalculateCubemapShadow(_light light, vec3 lightPosition, _material material, int index)
{
	// get vector between fragment position and light position
    vec3 fragToLight = fragmentPosition - lightPosition;

    // use the light to fragment vector to sample from the depth map    
    float closestDepth = texture(LightShadowCubeMaps[index], fragToLight).r;

    // it is currently in linear range between [0,1]. Re-transform back to original value
    closestDepth *= light.range;

    // now get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);

	float bias = 0.05;

    // now test for shadows
    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;

    return 1 - shadow;
}

float Calculate2dShadow(_light light, vec3 lightPosition, _material material, int index)
{
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	vec4 lightFragPos = lightFragmentPositions[index];

	// perform perspective divide
    vec3 projCoords = lightFragPos.xyz / lightFragPos.w;
    
	// transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;

	if(projCoords.z > 1.0)
	{
		return 1.0;
	}

    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(LightShadowMaps[index], projCoords.xy).r; 

    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
	
	float bias = max(0.05 * (1.0 - dot(normal, lightDirection)), 0.005);  

    // check whether current frag pos is in shadow
    float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;  

	vec2 texelSize = 1.0 / textureSize(LightShadowMaps[index], 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(LightShadowMaps[index], projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	
	shadow /= 9.0;

    return 1 - shadow;
}

vec4 CalculateFinalColor(_light light, 
	_material material,
	float diffuseScalar, 
	float shininessScalar,
	vec3 lightPosition,
	float intensity, 
	int index
)
{
	// create variables to store the final portions we combine to create the final color for this light
	vec4 ambientPortion;
	vec4 diffusePortion;
	vec4 specularPortion;

	// calculate the ambient and diffuse portion, with or without the texture
	if(material.useDiffuseMap)
	{
		ambientPortion = light.ambient * texture(material.diffuseMap, texcoords) * material.ambient;
		diffusePortion = light.diffuse * (diffuseScalar * texture(material.diffuseMap, texcoords));
	}
	else{
		ambientPortion =  light.ambient * material.ambient;
		diffusePortion = light.diffuse * (diffuseScalar * material.diffuse);
	}

	// calculate the specular portion with or without the texture
	if(material.useSpecularMap)
	{
		specularPortion = light.specular * ( shininessScalar * texture(material.specularMap, texcoords) );
	}
	else
	{
		specularPortion = shininessScalar * light.specular * material.specular;
	}

	// less than 0 is infinite range
	if(light.range > 0)
	{
		// calculate the distance between the light and fragment
		float dist = length(lightPosition - fragmentPosition);

		// calculate the attenuation scalar so far fragments are ignored
		float attenuation = (light.range * 1.0) / (1 + (0.9 * dist) + (0.032 * (dist * dist)));    

		// scale all color portions by the attenuation scalar
		ambientPortion *= attenuation;
		diffusePortion *= attenuation;
		specularPortion *= attenuation;
	}

	float shadow = 1.0;

	// directional
	if(light.lightType == 1)
	{
		shadow = Calculate2dShadow(light, lightPosition, material, index);
	}
	// point and spot
	else if(light.lightType == 2 || light.lightType == 0)
	{
		//shadow = CalculateCubemapShadow(light, lightPosition, material, index);
	}

	specularPortion *= shadow;
	diffusePortion *= shadow;

	// combine all portions into final color for this light and return
	return (ambientPortion + diffusePortion + specularPortion) * light.intensity;
}

vec4 CalculatePointLight(_light light, vec3 lightPosition, _material material, float intensity, int index)
{
	vec3 norm = normalize(normal);

	// calculate the direction from the fragment to the light
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	// calculate the diffuse scaler
	float diffuseScalar = max(dot(norm, lightDirection), 0.0);

	// calculate the direction from the fragment to the viewer
	// so we can compare that direction with the reflected direction
	// to calculate the specular scalar
	vec3 viewDirection = normalize(-fragmentPosition);

	vec3 halfwayDir = normalize(lightDirection + viewDirection);

	// the specular scalar is the angle between the view direction and the reflected direction
	float specularScalar = max(dot(norm, halfwayDir), 0.0);

	// apply shininess to the specular scalar
	float shininessScalar = max(pow(specularScalar, material.shininess), 0.0);

	// calculate the color portions of each element of the light
	return CalculateFinalColor(light, material, diffuseScalar, shininessScalar, lightPosition, intensity, index);
}

vec4 CalculateDirectionalLight(_light light, vec3 lightPosition, _material material, int index)
{
	vec3 norm = normalize(normal);

	// calculate the direction from the fragment to the light
	vec3 lightDirection = normalize(vec3(view * vec4(-light.direction, 0)));

	// calculate the diffuse scaler
	float diffuseScalar = max(dot(norm, lightDirection), 0.0);

	// if the diffuse portion is negative or 0 then there should be no specular highlights
	
	// calculate the direction from the fragment to the viewer
	// so we can compare that direction with the reflected direction
	// to calculate the specular scalar
	vec3 viewDirection = normalize(lightPosition - fragmentPosition);

	// the specular scalar is the angle between the view direction and the reflected direction
	vec3 halfwayDir = normalize(lightDirection + viewDirection);

	// the specular scalar is the angle between the view direction and the reflected direction
	float specularScalar = max(dot(norm, halfwayDir), 0.0);

	// apply shininess to the specular scalar
	float shininessScalar = max(pow(specularScalar, material.shininess), 0.0);
	
	// calculate the color portions of each element of the light
	return CalculateFinalColor(light, material, diffuseScalar, shininessScalar, lightPosition, 1.0, index);
}

vec4 CalculateSpotLight(_light light, vec3 lightPosition, _material material, int index)
{
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	float innerCutoff = atan( light.range / (light.radius / light.edgeSoftness));
	float outerCutoff = atan( light.range / light.radius);

	float theta     = dot(lightDirection, normalize(-lightDirection));
	float epsilon   =  innerCutoff - outerCutoff;
	float intensity = clamp((theta - outerCutoff) / epsilon, 0.0, 1.0);   

	if(theta > innerCutoff) 
	{
	  return CalculatePointLight(light, lightPosition, material, 1 - intensity, index);
	}
	else
	{
		if(material.useDiffuseMap)
		{
			return light.ambient * texture(material.diffuseMap, texcoords) * material.ambient;
		}
		else{
			return light.ambient * material.ambient;
		}
	}
}

vec4 GetLightingColor(_material material)
{
	vec4 color = vec4(0,0,0,1);

	for(int i = 0; i < min(LightCount, MaxLights); i++)
	{
		_light light = Lights[i];

		vec3 lightPosition = vec3(view * vec4(light.position, 1));

		if(light.enabled == false)
		{
			continue;
		}

		int type = light.lightType;

		// point light
		if(type == 0)
		{
			color += CalculatePointLight(light, lightPosition, material, 1.0, i);
		} 
		// directional light
		else if(type == 1)
		{
			color += CalculateDirectionalLight(light, lightPosition, material, i);
		}
		// spot light
		else if(type == 2)
		{
			color += CalculateSpotLight(light, lightPosition, material, i);
		}
	}

	return color;
}