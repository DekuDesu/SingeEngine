#version 330 core
// Interpolated values from the vertex shaders
in vec2 UV;

// Ouput data
out vec4 color;

// the vertex normal
in vec3 normal;
// the model * position of vertex
in vec3 fragmentPosition;

uniform vec3 cameraPosition;

uniform struct _material	{ 
	vec4 ambient;
	vec4 color;
	vec4 diffuse;
	vec4 specular;
	float shininess;
} material;


struct light{
	int lightType;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float range;
	float radius;
	vec3 position;
};

uniform light [10] Lights;
uniform int LightCount;

vec4 CalculatePointLight(light pointLight, _material material, vec3 normal, vec3 fragmentPosition, vec3 cameraPosition);

void main(){

	vec4 combinedColor = vec4(0);

	for(int i = 0; i < LightCount; i++)
	{
		vec4 lightColor = vec4(0);

		light currentLight = Lights[i];

		if(currentLight.lightType == 0)
		{
			lightColor = CalculatePointLight(currentLight, material, normal, fragmentPosition, cameraPosition);
		}

		combinedColor += lightColor;
	}

	color = combinedColor * material.color;
}