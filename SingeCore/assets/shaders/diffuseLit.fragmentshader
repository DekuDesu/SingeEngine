#version 330 core
// Interpolated values from the vertex shaders
in vec2 texcoords;

// Ouput data
out vec4 color;

// the vertex normal
in vec3 normal;
// the model * position of vertex
in vec3 fragmentPosition;

uniform vec3 cameraPosition;

uniform mat4 view;

uniform struct _material	{ 
	vec4 ambient;
	vec4 color;
	vec4 diffuse;
	vec4 specular;
	float shininess;
	float reflectivity;
	bool useDiffuseMap;
	sampler2D diffuseMap;
	bool useSpecularMap;
	sampler2D specularMap;
	bool useReflectionMap;
	sampler2D reflectionMap;
	bool useAreaMap;
	samplerCube areaMap;
} material;

vec4 GetReflection()
{
	if(material.useAreaMap == false)
	{
		return vec4(0);
	}

	vec3 I = normalize(fragmentPosition);

    vec4 viewSpaceReflected = vec4(reflect(I, normalize(normal)), 0);

	vec3 modelSpaceReflected = vec3(inverse(view) * viewSpaceReflected);

	if(material.useReflectionMap)
	{
		 return vec4(texture(material.reflectionMap, texcoords).rgb * texture(material.areaMap, modelSpaceReflected).rgb, 1.0);
	}

    return vec4(texture(material.areaMap, modelSpaceReflected).rgb, 1.0);
}

vec4 GetLightingColor(_material material);

void main()
{
	color = (material.reflectivity * GetReflection()) + (GetLightingColor(material) * material.color);
}