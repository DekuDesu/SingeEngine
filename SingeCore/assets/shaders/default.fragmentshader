#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

// Ouput data
out vec4 color;

// the vertex normal
in vec3 normal;
// the model * position of vertex
in vec3 fragmentPosition;

uniform vec3 cameraPosition;

uniform vec4 ambientColor;
uniform vec4 mainColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;
uniform float specularStrength;
uniform float shininess;

struct light{
	int lightType;
	vec4 color;
	float intensity;
	float range;
	float radius;
	vec3 position;
};

uniform light [10] Lights;
uniform int LightCount;

vec4 CalculatePointLight(light pointLight)
{
	vec3 lightDirection = normalize(pointLight.position - fragmentPosition);

	float diff = max(dot(normal, lightDirection), 0.0);

	vec4 diffuse = diff * diffuseColor;

	vec3 reflectedDir = reflect(-lightDirection, normal);

	float spec = pow(max(dot(cameraPosition, reflectedDir), 0.0), shininess);

	vec4 specularColor = pointLight.intensity * spec * pointLight.color;

	return diffuse + specularColor;
}

void main(){

	vec4 combinedColor = vec4(0);

	for(int i = 0; i < LightCount; i++)
	{
		vec4 lightColor = vec4(0);

		light currentLight = Lights[i];

		if(currentLight.lightType == 0)
		{
			lightColor = CalculatePointLight(currentLight);
		}

		combinedColor = combinedColor + lightColor;
	}

	color = (ambientColor + combinedColor) * mainColor;
}