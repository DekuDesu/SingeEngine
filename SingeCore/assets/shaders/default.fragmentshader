#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

// Ouput data
out vec4 color;

// the vertex normal
in vec3 normal;
// the model * position of vertex
in vec3 fragmentPosition;

uniform vec3 cameraPosition;

uniform vec4 ambientColor;
uniform vec4 mainColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;

struct light{
	int lightType;
	vec4 color;
	float intensity;
	float range;
	float radius;
	vec3 position;
};

uniform light [10] Lights;
uniform int lightCount;

void main(){

	vec3 lightDirection = normalize(Lights[0].position - fragmentPosition);

	float diff = max(dot(normal, lightDirection), 0.0);

	vec4 diffuse = diff * diffuseColor;

	color = (diffuse + ambientColor) * mainColor;
}