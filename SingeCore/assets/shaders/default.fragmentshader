#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

// Ouput data
out vec4 color;

// the vertex normal
in vec3 normal;
// the model * position of vertex
in vec3 fragmentPosition;


uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 cameraPosition;
uniform mat4 projectionMatrix;

uniform vec4 ambientColor;
uniform vec4 mainColor;
uniform vec4 diffuseColor;
uniform vec4 specularColor;
uniform float specularStrength;
uniform float shininess;

struct light{
	int lightType;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;
	float range;
	float radius;
	vec3 position;
};

uniform light [10] Lights;
uniform int LightCount;

vec4 CalculatePointLight(light pointLight)
{
	vec3 norm = normalize(normal);

	// calculate the position of light
	vec3 lightPosition = pointLight.position;

	// calculate the direction from the fragment to the light
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	// calculate the diffuse scaler
	float diffuseScalar = max(dot(norm, lightDirection), 0.0);

	// calculate the diffuse portion of the color
	vec4 diffusePortion = pointLight.diffuse * (diffuseScalar * diffuseColor);

	// reflect the light direction along the normal axis
	// so we can compare that reflected direction to our viewer to determine
	// the specular scalar
	vec3 reflectedDirection = reflect(lightDirection, normalize(norm));

	// calculate the direction from the fragment to the viewer
	// so we can compare that direction with the reflected direction
	// to calculate the specular scalar
	vec3 viewDirection = normalize(-cameraPosition - fragmentPosition);

	// the specular scalar is the angle between the view direction and the reflected direction
	float specularScalar = max(dot(viewDirection, reflectedDirection), 0.0);

	// apply shininess to the specular scalar
	float shininessScalar = pow(specularScalar, shininess);

	// calculate the specular portion of the color
	vec4 specularPortion = shininessScalar * pointLight.specular * specularColor;

	// calculate the ambient portion of the colors
	vec4 ambientPortion = pointLight.ambient * ambientColor;

	// calculate the distance between the light and fragment
	float dist = length(lightPosition - fragmentPosition);

	// calculate the attenuation scalar so far fragments are ignored
	float attenuation = (pointLight.range * 1.0) / (1 + (0.9 * dist) + (0.032 * (dist * dist)));    

	// scale all color portions by the attenuation scalar
	ambientPortion *= attenuation;
	diffusePortion *= attenuation;
	specularPortion *= attenuation;

	// combine all portions into final color for this light and return
	return (ambientPortion + diffusePortion + specularPortion);
}

void main(){

	vec4 combinedColor = vec4(0);

	for(int i = 0; i < LightCount; i++)
	{
		vec4 lightColor = vec4(0);

		light currentLight = Lights[i];

		if(currentLight.lightType == 0)
		{
			lightColor = CalculatePointLight(currentLight);
		}

		combinedColor += lightColor;
	}

	color = combinedColor * mainColor;
}