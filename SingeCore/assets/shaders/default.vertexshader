#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normalVector;

//// Output data ; will be interpolated for each fragment.
out vec2 UV;

out vec3 normal;
out vec3 fragmentPosition;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 modelMatrix;

void main(){

	vec3 pos =vertexPosition_modelspace;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(pos,1);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;

	normal = normalize(normalVector);

	fragmentPosition = vec3(modelMatrix * vec4(pos, 1));
}