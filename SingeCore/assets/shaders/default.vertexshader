#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normalVector;

//// Output data ; will be interpolated for each fragment.
out vec2 texcoords;

out vec3 normal;
out vec3 fragmentPosition;
//out mat4 view;

// Values that stay constant for the whole mesh.
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main(){

	vec3 pos = vertexPosition_modelspace;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  projection * view * model * vec4(pos,1);
	
	// UV of the vertex. No special space for this one.
	texcoords = 1 - vertexUV;

	normal = vec3(mat3(transpose(inverse(view * model))) * normalVector);

	fragmentPosition = vec3(view * model * vec4(pos, 1));
}